/*
 * MainView.java
 */

package my8085;

import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 * The application's main frame.
 */
public class MainView extends FrameView {

    public MainView(SingleFrameApplication app) {
        super(app);

        this.getFrame().setResizable(false);
        this.getFrame().setTitle("8085 Simulator");
        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            @Override
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
        initializeValue();
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = Main.getApplication().getMainFrame();
            aboutBox = new MainAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        Main.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jTextField9 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jTextField10 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jTextField12 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jTextField13 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jTextField14 = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jTextField15 = new javax.swing.JTextField();
        jTextField16 = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jTextField11 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        jTextField17 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setMaximumSize(new java.awt.Dimension(339, 270));
        mainPanel.setName("mainPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(my8085.Main.class).getContext().getResourceMap(MainView.class);
        jLabel1.setForeground(resourceMap.getColor("jLabel1.foreground")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jTextField1.setText(resourceMap.getString("jTextField1.text")); // NOI18N
        jTextField1.setName("jTextField1"); // NOI18N

        jLabel2.setForeground(resourceMap.getColor("jLabel2.foreground")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jTextField2.setText(resourceMap.getString("jTextField2.text")); // NOI18N
        jTextField2.setName("jTextField2"); // NOI18N

        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setToolTipText(resourceMap.getString("jButton1.toolTipText")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.setName("jPanel1"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jTextField3.setText(resourceMap.getString("jTextField3.text")); // NOI18N
        jTextField3.setFocusable(false);
        jTextField3.setName("jTextField3"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jTextField4.setText(resourceMap.getString("jTextField4.text")); // NOI18N
        jTextField4.setFocusable(false);
        jTextField4.setName("jTextField4"); // NOI18N

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jTextField5.setText(resourceMap.getString("jTextField5.text")); // NOI18N
        jTextField5.setFocusable(false);
        jTextField5.setName("jTextField5"); // NOI18N

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        jTextField6.setText(resourceMap.getString("jTextField6.text")); // NOI18N
        jTextField6.setFocusable(false);
        jTextField6.setName("jTextField6"); // NOI18N

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        jTextField7.setText(resourceMap.getString("jTextField7.text")); // NOI18N
        jTextField7.setFocusable(false);
        jTextField7.setName("jTextField7"); // NOI18N

        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        jTextField8.setText(resourceMap.getString("jTextField8.text")); // NOI18N
        jTextField8.setFocusable(false);
        jTextField8.setName("jTextField8"); // NOI18N

        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N

        jTextField9.setText(resourceMap.getString("jTextField9.text")); // NOI18N
        jTextField9.setFocusable(false);
        jTextField9.setName("jTextField9"); // NOI18N

        jLabel10.setText(resourceMap.getString("jLabel10.text")); // NOI18N
        jLabel10.setName("jLabel10"); // NOI18N

        jTextField10.setText(resourceMap.getString("jTextField10.text")); // NOI18N
        jTextField10.setFocusable(false);
        jTextField10.setName("jTextField10"); // NOI18N

        jLabel12.setForeground(resourceMap.getColor("jLabel12.foreground")); // NOI18N
        jLabel12.setText(resourceMap.getString("jLabel12.text")); // NOI18N
        jLabel12.setToolTipText(resourceMap.getString("jLabel12.toolTipText")); // NOI18N
        jLabel12.setName("jLabel12"); // NOI18N

        jPanel2.setName("jPanel2"); // NOI18N

        jLabel13.setForeground(resourceMap.getColor("jLabel13.foreground")); // NOI18N
        jLabel13.setText(resourceMap.getString("jLabel13.text")); // NOI18N
        jLabel13.setToolTipText(resourceMap.getString("jLabel13.toolTipText")); // NOI18N
        jLabel13.setName("jLabel13"); // NOI18N

        jLabel14.setText(resourceMap.getString("jLabel14.text")); // NOI18N
        jLabel14.setName("jLabel14"); // NOI18N

        jTextField12.setText(resourceMap.getString("jTextField12.text")); // NOI18N
        jTextField12.setFocusable(false);
        jTextField12.setName("jTextField12"); // NOI18N

        jLabel15.setText(resourceMap.getString("jLabel15.text")); // NOI18N
        jLabel15.setName("jLabel15"); // NOI18N

        jTextField13.setText(resourceMap.getString("jTextField13.text")); // NOI18N
        jTextField13.setFocusable(false);
        jTextField13.setName("jTextField13"); // NOI18N

        jLabel16.setText(resourceMap.getString("jLabel16.text")); // NOI18N
        jLabel16.setName("jLabel16"); // NOI18N

        jTextField14.setText(resourceMap.getString("jTextField14.text")); // NOI18N
        jTextField14.setFocusable(false);
        jTextField14.setName("jTextField14"); // NOI18N

        jLabel17.setText(resourceMap.getString("jLabel17.text")); // NOI18N
        jLabel17.setName("jLabel17"); // NOI18N

        jTextField15.setText(resourceMap.getString("jTextField15.text")); // NOI18N
        jTextField15.setFocusable(false);
        jTextField15.setName("jTextField15"); // NOI18N

        jTextField16.setText(resourceMap.getString("jTextField16.text")); // NOI18N
        jTextField16.setFocusable(false);
        jTextField16.setName("jTextField16"); // NOI18N

        jLabel18.setText(resourceMap.getString("jLabel18.text")); // NOI18N
        jLabel18.setName("jLabel18"); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(jLabel13))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextField16, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField16, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel10)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel7))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel8)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jLabel12))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel11.setForeground(resourceMap.getColor("jLabel11.foreground")); // NOI18N
        jLabel11.setText(resourceMap.getString("jLabel11.text")); // NOI18N
        jLabel11.setName("jLabel11"); // NOI18N

        jTextField11.setText(resourceMap.getString("jTextField11.text")); // NOI18N
        jTextField11.setName("jTextField11"); // NOI18N

        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setToolTipText(resourceMap.getString("jButton2.toolTipText")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jScrollPane1.setName("jScrollPane1");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Address", "Data"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setName("jTable1");
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getColumn(0).setResizable(false);
        jTable1.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("jTable1.columnModel.title0")); // NOI18N
        jTable1.getColumnModel().getColumn(1).setResizable(false);
        jTable1.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("jTable1.columnModel.title1")); // NOI18N

        jLabel19.setForeground(resourceMap.getColor("jLabel19.foreground")); // NOI18N
        jLabel19.setText(resourceMap.getString("jLabel19.text")); // NOI18N
        jLabel19.setName("jLabel19"); // NOI18N

        jTextField17.setText(resourceMap.getString("jTextField17.text")); // NOI18N
        jTextField17.setName("jTextField17"); // NOI18N

        jButton3.setForeground(resourceMap.getColor("jButton3.foreground")); // NOI18N
        jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
        jButton3.setToolTipText(resourceMap.getString("jButton3.toolTipText")); // NOI18N
        jButton3.setName("jButton3"); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jTextField2)
                                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(27, 27, 27))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2)
                                .addGap(21, 21, 21))))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField17, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, 0, 233, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(jTextField17, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        menuBar.setToolTipText(resourceMap.getString("menuBar.toolTipText")); // NOI18N
        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setToolTipText(resourceMap.getString("fileMenu.toolTipText")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N
        fileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuActionPerformed(evt);
            }
        });

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(my8085.Main.class).getContext().getActionMap(MainView.class, this);
        jMenuItem2.setAction(actionMap.get("loadFile")); // NOI18N
        jMenuItem2.setText(resourceMap.getString("jMenuItem2.text")); // NOI18N
        jMenuItem2.setName("jMenuItem2"); // NOI18N
        fileMenu.add(jMenuItem2);

        jMenuItem1.setAction(actionMap.get("saveFile")); // NOI18N
        jMenuItem1.setText(resourceMap.getString("jMenuItem1.text")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        fileMenu.add(jMenuItem1);

        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);
        fileMenu.getAccessibleContext().setAccessibleParent(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setToolTipText(resourceMap.getString("helpMenu.toolTipText")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N
        statusPanel.setPreferredSize(new java.awt.Dimension(303, 25));

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 166, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String startDisp = jTextField11.getText();
        String temp;
        if(startDisp.length() != 4) {
            JOptionPane.showMessageDialog(null, "Invalid Address !!!\n Enter address within the range 0000 to FF00", "ERROR !!!", JOptionPane.ERROR_MESSAGE);
        } else {
            try{
                int addr = Integer.parseInt(startDisp,16);
                int i;
                for(i=0;i<256 && addr<65536;i++,addr++) {
                    temp = Integer.toHexString(addr).toUpperCase();
                    while(temp.length() != 4) {
                        temp = "0"+temp;
                    }
                    jTable1.setValueAt(temp, i, 0);
                    jTable1.setValueAt(data[addr].toUpperCase(), i, 1);
                }
                for(;i<256;i++)
                {
                    jTable1.setValueAt("", i, 0);
                    jTable1.setValueAt("", i, 1);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Invalid Address !!!\n Enter address within the range 0000 to FF00", "ERROR !!!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String address = jTextField1.getText().toUpperCase();
        String val = jTextField2.getText().toUpperCase();
        String temp;
        if(address.length() != 4) {
            JOptionPane.showMessageDialog(null, "Invalid Address !!!\n16-bit address required !!!", "ERROR !!!", JOptionPane.ERROR_MESSAGE);
        } else if(val.length() != 2) {
            JOptionPane.showMessageDialog(null, "Invalid Data !!!\n8-bit data required !!!", "ERROR !!!", JOptionPane.ERROR_MESSAGE);
        } else {
            try{
                int addr = Integer.parseInt(address,16);
                int d = Integer.parseInt(val,16);
                this.setMemory(addr, d);
                int i;
                int addrt=addr;
                for(i=0;i<256 && addrt<65536;i++,addrt++) {
                    temp = Integer.toHexString(addrt).toUpperCase();
                    while(temp.length() != 4) {
                        temp = "0"+temp;
                    }
                    jTable1.setValueAt(temp, i, 0);
                    jTable1.setValueAt(data[addrt].toUpperCase(), i, 1);
                }
                for(;i<256;i++)
                {
                    jTable1.setValueAt("", i, 0);
                    jTable1.setValueAt("", i, 1);
                }
                addr++;
                temp = Integer.toHexString(addr).toUpperCase();
                while(temp.length() < 4) {
                        temp = "0"+temp;
                }
                if(addr<65536)
                {
                    jTextField1.setText(temp);
                    jTextField2.setText(data[addr]);
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "End of memory address !!!", "ALERT !!!", JOptionPane.WARNING_MESSAGE);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Invalid Address or Data !!!", "ERROR !!!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String address = jTextField17.getText();
        if(address.length() != 4) {
            JOptionPane.showMessageDialog(null, "Invalid Address !!!", "ERROR !!!", JOptionPane.ERROR_MESSAGE);
        } else {
            try{
                int addr = Integer.parseInt(address,16);
                this.execute(addr);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Internal error occurred in flow of execution...\nCheck the program flow...", "Execution Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void fileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_fileMenuActionPerformed

    private void initializeValue() {
        pc=0;
        sp=65535;
        s=z=ac=p=cy=0;
	psw=0;
        firstrun=1;
        for(int i=0;i<65536;i++) {
            data[i]="08";
            stack[i]="00";
        }
        String temp;
        try{
                int addr = Integer.parseInt("0000",16);
                for(int i=0;i<256 && addr<65536;i++,addr++) {
                    temp = Integer.toHexString(addr).toUpperCase();
                    while(temp.length() != 4) {
                        temp = "0"+temp;
                    }
                    jTable1.setValueAt(temp, i, 0);
                    jTable1.setValueAt(data[addr].toUpperCase(), i, 1);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Invalid Address !!!\n Enter address within the range 0000 to FF00", "ERROR !!!", JOptionPane.ERROR_MESSAGE);
            }
        this.disp();
    }

    @Action
    public void saveFile() {
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int option = chooser.showSaveDialog(null);
        if(option == JFileChooser.APPROVE_OPTION) {
            try {
                FileWriter out = new FileWriter(chooser.getSelectedFile());
                BufferedWriter fout = new BufferedWriter(out);
                for(int i=0;i<65536;i++) {
                    fout.write(data[i]);
                    fout.newLine();
                }
                fout.flush();
                out.close();
                JOptionPane.showMessageDialog(null, "File Saved Successfully", "Saved Successfully", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error While Saving file"+e.getMessage(), "Saving Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    @Action
    public void loadFile() {
        int correct=1;
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int option = chooser.showOpenDialog(null);
        if(option == JFileChooser.APPROVE_OPTION) {
            try {
                FileReader in = new FileReader(chooser.getSelectedFile());
                BufferedReader fin = new BufferedReader(in);
                for(int i=0;i<65536;i++) {
                    String str = fin.readLine();
                    if(str.length() != 2) {
                        correct=0;
                        throw new Exception("Invalid File Choosen");
                    }
                    else
                    {
                        int n=Integer.parseInt(str,16);
                    }
                }
                FileReader inn = new FileReader(chooser.getSelectedFile());
                BufferedReader finn = new BufferedReader(inn);
                for(int i=0;i<65536;i++) {
                    String str = finn.readLine();
                    if(str.length() != 2) {
                        correct=0;
                        throw new Exception("Invalid File Choosen");
                    }
                    data[i] = str;
                }
                String temp;
                int addr = Integer.parseInt("0000",16);
                for(int i=0;i<256 && addr<65536;i++,addr++) {
                    temp = Integer.toHexString(addr).toUpperCase();
                    while(temp.length() != 4) {
                        temp = "0"+temp;
                    }
                    jTable1.setValueAt(temp, i, 0);
                    jTable1.setValueAt(data[addr].toUpperCase(), i, 1);
                }
                JOptionPane.showMessageDialog(null, "File Loaded Successfully", "Loading Complete", JOptionPane.INFORMATION_MESSAGE);
            } catch (NullPointerException e) {
                if(correct==0)
                    JOptionPane.showMessageDialog(null, "Error While Opening file\n"+e.getMessage(), "Loading Error", JOptionPane.ERROR_MESSAGE);
                else
                    JOptionPane.showMessageDialog(null, "File Loaded Successfully\nProgram loaded at memory location : 0000", "Loading Complete", JOptionPane.INFORMATION_MESSAGE);
            }
            catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error While Opening file\n"+e.getMessage(), "Loading Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField15;
    private javax.swing.JTextField jTextField16;
    private javax.swing.JTextField jTextField17;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;
    private JDialog aboutBox;

    //----------------Variable Declaration--------------//
    private String[] data = new String[65536];
    private String[] stack=new String[65536];
    int pc,sp;
    int rega,regb,regc,regd,rege,regh,regl,regm,psw;
    int s,z,ac,p,cy;
    int firstrun;
    //--------1's & 2's complement-----------//
    int complement1(int arg)
    {
        int i;
    	String n=Integer.toBinaryString(arg);
    	char[] a=n.toCharArray();
    	for(i=0;i<a.length;i++)
    	{
            if(a[i]=='1')
            a[i]='0';
            else if(a[i]=='0')
            a[i]='1';
	}
        n="";
        for(i=a.length;i<8;i++)
        n+="1";
	for(i=0;i<a.length;i++)
	    n+=a[i];
	arg=Integer.parseInt(n, 2);
	return(arg);
    }
    int complement2(int arg)
    {
    	arg=this.complement1(arg);
	arg++;
        if(arg>255)
            arg=arg-256;
	return(arg);
    }
    //--------set and reset flags and PSW calculation--------//
    void setPSW(int flag)
    {
        if(flag>=128)
        {
            this.setSign();
            flag-=128;
        }
        else
        {
            this.resetSign();
        }
        if(flag>=64)
        {
            this.setZero();
            flag-=64;
        }
        else
        {
            this.resetZero();
        }
        if(flag>=32)
        {
            flag-=32;
        }
        if(flag>=16)
        {
            this.setAuxcy();
            flag-=16;
        }
        else
        {
            this.resetAuxcy();
        }
        if(flag>=8)
        {
            flag-=8;
        }
        if(flag>=4)
        {
            this.setParity();
            flag-=4;
        }
        else
        {
            this.resetParity();
        }
        if(flag>=2)
        {
            flag-=2;
        }
        if(flag>=1)
        {
            this.setCarry();
            flag-=1;
        }
        else
        {
            this.resetCarry();
        }
    }
    void setSign()
    {
        if(s!=1)
	{
            s=1;
            psw+=128;
	}
    }
    void resetSign()
    {
	if(s!=0)
	{
            s=0;
            psw-=128;
	}
    }
    void setZero()
    {
        if(z!=1)
	{
            z=1;
            psw+=64;
	}
    }
    void resetZero()
    {
        if(z!=0)
	{
            z=0;
            psw-=64;
	}
    }
    void chkAuxcy(int reg1,int reg2)
    {
	String op1,op2,opc1,opc2;
	op1=Integer.toHexString(reg1);
	op2=Integer.toHexString(reg2);
	opc1=opc2="";
	opc1+=op1.charAt(op1.length()-1);
	opc2+=op2.charAt(op2.length()-1);
	if(((Integer.parseInt(opc1,16))+(Integer.parseInt(opc2,16)))>15)
	{
            this.setAuxcy();
	}
        else
        {
            this.resetAuxcy();
        }
    }
    void chkcyAuxcy(int reg1,int reg2)
    {
	String op1,op2,opc1,opc2;
	op1=Integer.toHexString(reg1).toUpperCase();
	op2=Integer.toHexString(reg2).toUpperCase();
	opc1=opc2="";
	opc1+=op1.charAt(op1.length()-1);
	opc2+=op2.charAt(op2.length()-1);
	if(((Integer.parseInt(opc1,16))+(Integer.parseInt(opc2,16))+cy)>15)
	{
            this.setAuxcy();
	}
	else
	{
            this.resetAuxcy();
	}
    }
    void setAuxcy()
    {
	if(ac!=1)
	{
            ac=1;
            psw+=16;
	}
    }
    void resetAuxcy()
    {
	if(ac!=0)
	{
            ac=0;
            psw-=16;
	}
    }
    void chkparity(int reg)
    {
	String par=Integer.toBinaryString(rega);
	int p=0;
	for(int i=0;i<par.length();i++)
            if(par.charAt(i)=='1')
                p++;
	if(p%2==0)
            this.setParity();
        else
            this.resetParity();
    }
    void setParity()
    {
        if(p!=1)
	{
            p=1;
            psw+=4;
	}
    }
    void resetParity()
    {
	if(p!=0)
	{
            p=0;
            psw-=4;
	}
    }
    void setCarry()
    {
	if(cy!=1)
        {
            cy=1;
            psw+=1;
	}
    }
    void resetCarry()
    {
	if(cy!=0)
	{
            cy=0;
            psw-=1;
	}
    }
    //-------------Execution module----------------//
    void setMemory(int addr,int val)
    {
        String d=Integer.toHexString(val).toUpperCase();
        while(d.length()<2)
        {
            d="0"+d;
        }
        data[addr]=d;
    }
    int getMx(int au,int al)
    {
        String hh=Integer.toHexString(au).toUpperCase();
        while(hh.length()<2)
        {
            hh="0"+hh;
        }
        String ll=Integer.toHexString(al).toUpperCase();
        while(ll.length()<2)
        {
            ll="0"+ll;
        }
        String hl=hh+ll;
        int mm=Integer.parseInt(hl, 16);
        int dd=Integer.parseInt(data[mm], 16);
        return dd;
    }
    int getM()
    {
        String hh=Integer.toHexString(regh).toUpperCase();
        while(hh.length()<2)
        {
            hh="0"+hh;
        }
        String ll=Integer.toHexString(regl).toUpperCase();
        while(ll.length()<2)
        {
            ll="0"+ll;
        }
        String hl=hh+ll;
        int mm=Integer.parseInt(hl, 16);
        int dd=Integer.parseInt(data[mm], 16);
        return dd;
    }
    void setMx(int val,int au,int al)
    {
        String hh=Integer.toHexString(au).toUpperCase();
        while(hh.length()<2)
        {
            hh="0"+hh;
        }
        String ll=Integer.toHexString(al).toUpperCase();
        while(ll.length()<2)
        {
            ll="0"+ll;
        }
        String hl=hh+ll;
        int mm=Integer.parseInt(hl, 16);
        String d=Integer.toHexString(val).toUpperCase();
        while(d.length()<2)
        {
            d="0"+d;
        }
        data[mm]=d;
    }
    void setM(int val)
    {
        String hh=Integer.toHexString(regh).toUpperCase();
        while(hh.length()<2)
        {
            hh="0"+hh;
        }
        String ll=Integer.toHexString(regl).toUpperCase();
        while(ll.length()<2)
        {
            ll="0"+ll;
        }
        String hl=hh+ll;
        int mm=Integer.parseInt(hl, 16);
        String d=Integer.toHexString(val).toUpperCase();
        while(d.length()<2)
        {
            d="0"+d;
        }
        data[mm]=d;
    }

    void call()
    {
        int temp=pc;
        pc+=3;
        String pcs=Integer.toHexString(pc);
        while(pcs.length()<4)
        {
            pcs="0"+pcs;
        }
        int pu=Integer.parseInt((pcs.substring(0, 2)),16);
        int pl=Integer.parseInt((pcs.substring(2, 4)),16);
        this.push(pu);
        this.push(pl);
        pc=Integer.parseInt(data[temp+2]+data[temp+1], 16);
    }
    void jmp()
    {
        String pcx=data[pc+2]+data[pc+1];
        pc=Integer.parseInt(pcx, 16);
    }
    void ret()
    {
        String pcl=Integer.toHexString(this.pop());
        String pcu=Integer.toHexString(this.pop());
        while(pcl.length()<2)
        {
            pcl="0"+pcl;
        }
        while(pcu.length()<2)
        {
            pcu="0"+pcu;
        }
        pc=Integer.parseInt(pcu+pcl,16);
    }

    void push(int val)
    {
        String d=Integer.toHexString(val).toUpperCase();
        while(d.length()<2)
        {
            d="0"+d;
        }
        sp--;
        if(sp<0)
        {
            sp=65535;
            JOptionPane.showMessageDialog(null, "Stack Overrflow Occurred!!!\nMight result in error!!!\nOccurred while executing at : "+this.intToHex(pc+1, 4), "Warning!", JOptionPane.WARNING_MESSAGE);
        }
        stack[sp]=d;
    }
    int pop()
    {
        int d=Integer.parseInt(stack[sp], 16);
        sp++;
        if(sp>65535)
        {
            sp=0;
            JOptionPane.showMessageDialog(null, "Stack Underflow Occurred!!!\nMight result in error!!!\nOccurred while executing at : "+this.intToHex(pc, 4), "Warning!", JOptionPane.WARNING_MESSAGE);
        }
        return(d);
    }

    String intToHex(int val,int len)
    {
        String str=Integer.toHexString(val).toUpperCase();
        while(str.length()<len)
        {
            str="0"+str;
        }
        return str;
    }

    void disp()
    {
        jTextField3.setText(this.intToHex(rega, 2));
        jTextField7.setText(this.intToHex(psw, 2));
        jTextField4.setText(this.intToHex(regb, 2));
        jTextField8.setText(this.intToHex(regc, 2));
        jTextField5.setText(this.intToHex(regd, 2));
        jTextField9.setText(this.intToHex(rege, 2));
        jTextField6.setText(this.intToHex(regh, 2));
        jTextField10.setText(this.intToHex(regl, 2));
        jTextField12.setText(this.intToHex(s, 1));
        jTextField13.setText(this.intToHex(z, 1));
        jTextField15.setText(this.intToHex(ac, 1));
        jTextField14.setText(this.intToHex(p, 1));
        jTextField16.setText(this.intToHex(cy, 1));
    }

    public void execute(int stadr)
    {
        pc=stadr;
        sp=65535;
        s=z=ac=p=cy=0;
	psw=0;
	int temp,errorflag=0,endflag=0;
        String pcl,pcu,spl,spu,a,nn;
        char aa[],tempc;
	while(pc!=65536 && errorflag==0 && endflag==0)
	{
            int i=0;
            switch(Integer.parseInt(data[pc],16))
            {
          //--------------MOV A,r-------------//no flag
                case 127:
                    break;
		case 120:
                    rega=regb;
                    pc++;
                    break;
		case 121:
                    rega=regc;
                    pc++;
                    break;
		case 122:
                    rega=regd;
                    pc++;
                    break;
                case 123:
                    rega=rege;
                    pc++;
                    break;
		case 124:
                    rega=regh;
                    pc++;
                    break;
                case 125:
                    rega=regl;
                    pc++;
                    break;
                case 126:
                    regm=this.getM();
                    rega=regm;
                    pc++;
                    break;
          //--------------MOV B,r--------------//no flag
		case 71:
                    regb=rega;
                    pc++;
                    break;
                case 64:
                    pc++;
                    break;
                case 65:
                    regb=regc;
                    pc++;
                    break;
                case 66:
                    regb=regd;
                    pc++;
                    break;
                case 67:
                    regb=rege;
                    pc++;
                    break;
                case 68:
                    regb=regh;
                    pc++;
                    break;
                case 69:
                    regb=regl;
                    pc++;
                    break;
                case 70:
                    regm=this.getM();
                    regb=regm;
                    pc++;
                    break;
        //--------------MOV C,r-------------//no flag
                case 79:
                    regc=rega;
                    pc++;
                    break;
                case 72:
                    regc=regb;
                    pc++;
                    break;
                case 73:
                    pc++;
                    break;
                case 74:
                    regc=regd;
                    pc++;
                    break;
                case 75:
                    regc=rege;
                    pc++;
                    break;
                case 76:
                    regc=regh;
                    pc++;
                    break;
                case 77:
                    regc=regl;
                    pc++;
                    break;
                case 78:
                    regm=this.getM();
                    regc=regm;
                    pc++;
                    break;
        //--------------MOV D,r-------------//no flag
		case 87:
                    regd=rega;
                    pc++;
                    break;
                case 80:
                    regd=regb;
                    pc++;
                    break;
                case 81:
                    regd=regc;
                    pc++;
                    break;
                case 82:
                    pc++;
                    break;
		case 83:
                    regd=rege;
                    pc++;
                    break;
		case 84:
                    regd=regh;
                    pc++;
                    break;
                case 85:
                    regd=regl;
                    pc++;
                    break;
                case 86:
                    regm=this.getM();
                    regd=regm;
                    pc++;
                    break;
       //--------------MOV E,r-------------//no flag
		case 95:
                    rege=rega;
                    pc++;
                    break;
                case 88:
                    rege=regb;
                    pc++;
                    break;
                case 89:
                    rege=regc;
                    pc++;
                    break;
                case 90:
                    rege=regd;
                    pc++;
                    break;
                case 91:
                    pc++;
                    break;
                case 92:
                    rege=regh;
                    pc++;
                    break;
                case 93:
                    rege=regl;
                    pc++;
                    break;
                case 94:
                    regm=this.getM();
                    rege=regm;
                    pc++;
                    break;
      //--------------MOV H,r-------------//no flag
		case 103:
                    regh=rega;
                    pc++;
                    break;
                case 96:
                    regh=regb;
                    pc++;
                    break;
                case 97:
                    regh=regc;
                    pc++;
                    break;
                case 98:
                    regh=regd;
                    pc++;
                    break;
                case 99:
                    regh=rege;
                    pc++;
                    break;
                case 100:
                    pc++;
                    break;
                case 101:
                    regh=regl;
                    pc++;
                    break;
		case 102:
                    regm=this.getM();
                    regh=regm;
                    pc++;
                    break;
       //--------------MOV L,r-------------//no flag
		case 111:
                    regl=rega;
                    pc++;
                    break;
		case 104:
                    regl=regb;
                    pc++;
                    break;
                case 105:
                    regl=regc;
                    pc++;
                    break;
                case 106:
                    regl=regd;
                    pc++;
                    break;
                case 107:
                    regl=rege;
                    pc++;
                    break;
                case 108:
                    regl=regh;
                    pc++;
                    break;
		case 109:
                    pc++;
                    break;
                case 110:
                    regm=this.getM();
                    regl=regm;
                    pc++;
                    break;
       //--------------MOV M,r-------------//no flag
		case 119:
                    regm=rega;
                    this.setM(regm);
                    pc++;
                    break;
                case 112:
                    regm=regb;
                    this.setM(regm);
                    pc++;
                    break;
                case 113:
                    regm=regc;
                    this.setM(regm);
                    pc++;
                    break;
                case 114:
                    regm=regd;
                    this.setM(regm);
                    pc++;
                    break;
                case 115:
                    regm=rege;
                    this.setM(regm);
                    pc++;
                    break;
                case 116:
                    regm=regh;
                    this.setM(regm);
                    pc++;
                    break;
                case 117:
                    regm=regl;
                    this.setM(regm);
                    pc++;
                    break;
       //--------------MVI-----------------//no flag
		case 62:
                    pc++;
                    rega=Integer.parseInt(data[pc],16);
                    pc++;
                    break;
		case 6:
                    pc++;
                    regb=Integer.parseInt(data[pc],16);
                    pc++;
                    break;
		case 14:
                    pc++;
                    regc=Integer.parseInt(data[pc],16);
                    pc++;
                    break;
		case 22:
                    pc++;
                    regd=Integer.parseInt(data[pc],16);
                    pc++;
                    break;
		case 30:
                    pc++;
                    rege=Integer.parseInt(data[pc],16);
                    pc++;
                    break;
                case 38:
                    pc++;
                    regh=Integer.parseInt(data[pc],16);
                    pc++;
                    break;
                case 46:
                    pc++;
                    regl=Integer.parseInt(data[pc],16);
                    pc++;
                    break;
		case 54:
                    pc++;
                    regm=Integer.parseInt(data[pc],16);
                    this.setM(regm);
                    pc++;
                    break;
                //--------------ADD-----------------//all flags
		case 135:
                    this.chkAuxcy(rega, rega);
                    rega+=rega;
                    if(rega>255)
                    {
                        this.setCarry();
                        rega=rega-256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
		case 128:
                    this.chkAuxcy(rega, regb);
                    rega+=regb;
                    if(rega>255)
                    {
                        this.setCarry();
                        rega=rega-256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
		case 129:
                    this.chkAuxcy(rega, regc);
                    rega+=regc;
                    if(rega>255)
                    {
                        this.setCarry();
                        rega=rega-256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
		case 130:
                    this.chkAuxcy(rega, regd);
                    rega+=regd;
                    if(rega>255)
                    {
                        this.setCarry();
                        rega=rega-256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
		case 131:
                    this.chkAuxcy(rega, rege);
                    rega+=rege;
                    if(rega>255)
                    {
                        this.setCarry();
                        rega=rega-256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
		case 132:
                    this.chkAuxcy(rega, regh);
                    rega+=regh;
                    if(rega>255)
                    {
                        this.setCarry();
                        rega=rega-256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
		case 133:
                    this.chkAuxcy(rega, regl);
                    rega+=regl;
                    if(rega>255)
                    {
                        this.setCarry();
                        rega=rega-256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
		case 134:
                    regm=this.getM();
                    this.chkAuxcy(rega, regm);
                    rega+=regm;
                    if(rega>255)
                    {
                        this.setCarry();
                        rega=rega-256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
        //-------------ADC-----------------//all flags
		case 143:
                    this.chkcyAuxcy(rega, rega);
                    rega+=(rega+cy);
                    if(rega>255)
                    {
                        this.setCarry();
                        rega=rega-256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
		case 136:
                    this.chkcyAuxcy(rega, regb);
                    rega+=(regb+cy);
                    if(rega>255)
                    {
                        this.setCarry();
                        rega=rega-256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
		case 137:
                    this.chkcyAuxcy(rega, regc);
                    rega+=(regc+cy);
                    if(rega>255)
                    {
                        this.setCarry();
                        rega=rega-256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
		case 138:
                    this.chkcyAuxcy(rega, regd);
                    rega+=(regd+cy);
                    if(rega>255)
                    {
                        this.setCarry();
                        rega=rega-256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
		case 139:
                    this.chkcyAuxcy(rega, rege);
                    rega+=(rege+cy);
                    if(rega>255)
                    {
                        this.setCarry();
                        rega=rega-256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
		case 140:
                    this.chkcyAuxcy(rega, regh);
                    rega+=(regh+cy);
                    if(rega>255)
                    {
                        this.setCarry();
                        rega=rega-256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
		case 141:
                    this.chkcyAuxcy(rega, regl);
                    rega+=(regl+cy);
                    if(rega>255)
                    {
                        this.setCarry();
                        rega=rega-256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
		case 142:
                    regm=this.getM();
                    this.chkcyAuxcy(rega, regm);
                    rega+=(regm+cy);
                    if(rega>255)
                    {
                        this.setCarry();
                        rega=rega-256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
	//-------------SUB-----------------//all flags
		case 151:
                    this.chkAuxcy(rega, this.complement2(rega));
                    rega-=rega;
                    if(rega<0)
                    {
                        this.setCarry();
                        rega=rega+256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
		case 144:
                    this.chkAuxcy(rega, this.complement2(regb));
                    rega-=regb;
                    if(rega<0)
                    {
                        this.setCarry();
                        rega=rega+256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
		case 145:
                    this.chkAuxcy(rega, this.complement2(regc));
                    rega-=regc;
                    if(rega<0)
                    {
                        this.setCarry();
                        rega=rega+256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
		case 146:
                    this.chkAuxcy(rega, this.complement2(regd));
                    rega-=regd;
                    if(rega<0)
                    {
                       this.setCarry();
		       rega=rega+256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
		case 147:
                    this.chkAuxcy(rega, this.complement2(rege));
                    rega-=rege;
                    if(rega<0)
                    {
                        this.setCarry();
                        rega=rega+256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
		case 148:
                    this.chkAuxcy(rega, this.complement2(regh));
                    rega-=regh;
                    if(rega<0)
                    {
                        this.setCarry();
                        rega=rega+256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
		case 149:
                    this.chkAuxcy(rega, this.complement2(regl));
                    rega-=regl;
                    if(rega<0)
                    {
                        this.setCarry();
                        rega=rega+256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
		case 150:
                    regm=this.getM();
                    this.chkAuxcy(rega, this.complement2(regm));
                    rega-=regm;
                    if(rega<0)
                    {
                        this.setCarry();
                        rega=rega+256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
	//------------SBB-------------//all flags
		case 159:
                    this.chkAuxcy(rega, this.complement2(rega+cy));
                    rega-=(rega+cy);
                    if(rega<0)
                    {
                        this.setCarry();
                        rega=rega+256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
		case 152:
                    this.chkAuxcy(rega, this.complement2(regb+cy));
                    rega-=(regb+cy);
                    if(rega<0)
                    {
                        this.setCarry();
                        rega=rega+256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
		case 153:
                    this.chkAuxcy(rega, this.complement2(regc+cy));
                    rega-=(regc+cy);
                    if(rega<0)
                    {
                        this.setCarry();
                        rega=rega+256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
		case 154:
                    this.chkAuxcy(rega, this.complement2(regd+cy));
                    rega-=(regd+cy);
                    if(rega<0)
                    {
                        this.setCarry();
                        rega=rega+256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
		case 155:
                    this.chkAuxcy(rega, this.complement2(rege+cy));
                    rega-=(rege+cy);
                    if(rega<0)
                    {
                        this.setCarry();
                        rega=rega+256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
		case 156:
                    this.chkAuxcy(rega, this.complement2(regh+cy));
                    rega-=(regh+cy);
                    if(rega<0)
                    {
                        this.setCarry();
                        rega=rega+256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
		case 157:
                    this.chkAuxcy(rega, this.complement2(regl+cy));
                    rega-=(regl+cy);
                    if(rega<0)
                    {
                        this.setCarry();
                        rega=rega+256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
		case 158:
                    regm=this.getM();
                    this.chkAuxcy(rega, this.complement2(regm+cy));
                    rega-=(regm+cy);
                    if(rega<0)
                    {
                        this.setCarry();
                        rega=rega+256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
         //------------CMP-------------//all flags
                case 191:
                    this.resetSign();
                    this.setZero();
                    this.chkAuxcy(rega, rega);
                    this.chkparity(0);
                    this.resetCarry();
                    pc++;
                    break;
                case 184:
                    temp=rega-regb;
                    this.chkAuxcy(rega, this.complement2(regb));
                    if(rega<regb)
                    {
                        temp+=256;
                        this.setCarry();
                        this.resetZero();
                    }
                    else if(rega==regb)
                    {
                        this.setZero();
                        this.resetCarry();
                    }
                    else if(rega>regb)
                    {
                        this.resetCarry();
                        this.resetZero();
                    }
                    if(temp>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    this.chkparity(temp);
                    pc++;
                    break;
                case 185:
                    temp=rega-regc;
                    this.chkAuxcy(rega, this.complement2(regc));
                    if(rega<regc)
                    {
                        temp+=256;
                        this.setCarry();
                        this.resetZero();
                    }
                    else if(rega==regc)
                    {
                        this.setZero();
                        this.resetCarry();
                    }
                    else if(rega>regc)
                    {
                        this.resetCarry();
                        this.resetZero();
                    }
                    if(temp>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    this.chkparity(temp);
                    pc++;
                    break;
                case 186:
                    temp=rega-regd;
                    this.chkAuxcy(rega, this.complement2(regd));
                    if(rega<regd)
                    {
                        temp+=256;
                        this.setCarry();
                        this.resetZero();
                    }
                    else if(rega==regd)
                    {
                        this.setZero();
                        this.resetCarry();
                    }
                    else if(rega>regd)
                    {
                        this.resetCarry();
                        this.resetZero();
                    }
                    if(temp>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    this.chkparity(temp);
                    pc++;
                    break;
                case 187:
                    temp=rega-rege;
                    this.chkAuxcy(rega, this.complement2(rege));
                    if(rega<rege)
                    {
                        temp+=256;
                        this.setCarry();
                        this.resetZero();
                    }
                    else if(rega==rege)
                    {
                        this.setZero();
                        this.resetCarry();
                    }
                    else if(rega>rege)
                    {
                        this.resetCarry();
                        this.resetZero();
                    }
                    if(temp>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    this.chkparity(temp);
                    pc++;
                    break;
                case 188:
                    temp=rega-regh;
                    this.chkAuxcy(rega, this.complement2(regh));
                    if(rega<regh)
                    {
                        temp+=256;
                        this.setCarry();
                        this.resetZero();
                    }
                    else if(rega==regh)
                    {
                        this.setZero();
                        this.resetCarry();
                    }
                    else if(rega>regh)
                    {
                        this.resetCarry();
                        this.resetZero();
                    }
                    if(temp>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    this.chkparity(temp);
                    pc++;
                    break;
                case 189:
                    temp=rega-regl;
                    this.chkAuxcy(rega, this.complement2(regl));
                    if(rega<regl)
                    {
                        temp+=256;
                        this.setCarry();
                        this.resetZero();
                    }
                    else if(rega==regl)
                    {
                        this.setZero();
                        this.resetCarry();
                    }
                    else if(rega>regl)
                    {
                        this.resetCarry();
                        this.resetZero();
                    }
                    if(temp>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    this.chkparity(temp);
                    pc++;
                    break;
                case 190:
                    regm=this.getM();
                    temp=rega-regm;
                    this.chkAuxcy(rega, this.complement2(regm));
                    if(rega<regm)
                    {
                        temp+=256;
                        this.setCarry();
                        this.resetZero();
                    }
                    else if(rega==regm)
                    {
                        this.setZero();
                        this.resetCarry();
                    }
                    else if(rega>regm)
                    {
                        this.resetCarry();
                        this.resetZero();
                    }
                    if(temp>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    this.chkparity(temp);
                    pc++;
                    break;
	 //------------INR-------------//all flags except cy
		case 60:
                    this.chkAuxcy(rega, 1);
                    rega+=1;
                    if(rega>255)
                    {
                        rega=rega-256;
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
		case 4:
                    this.chkAuxcy(regb, 1);
                    regb+=1;
                    if(regb>255)
                    {
                        regb=regb-256;
                    }
                    if(regb>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(regb==0)
                    {
                        this.setZero();
                    }
                    else
                    {

                        this.resetZero();
                    }
                    this.chkparity(regb);
                    pc++;
                    break;
		case 12:
                    this.chkAuxcy(regc, 1);
                    regc+=1;
                    if(regc>255)
                    {
                        regc=regc-256;
                    }
                    if(regc>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(regc==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(regc);
                    pc++;
                    break;
		case 20:
                    this.chkAuxcy(regd, 1);
                    regd+=1;
                    if(regd>255)
                    {
                        regd=regd-256;
                    }
                    if(regd>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(regd==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(regd);
                    pc++;
                    break;
		case 28:
                    this.chkAuxcy(rege, 1);
                    rege+=1;
                    if(rege>255)
                    {
                        rege=rege-256;
                    }
                    if(rege>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rege==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rege);
                    pc++;
                    break;
		case 36:
                    this.chkAuxcy(regh, 1);
                    regh+=1;
                    if(regh>255)
                    {
                        regh=regh-256;
                    }
                    if(regh>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(regh==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(regh);
                    pc++;
                    break;
		case 44:
                    this.chkAuxcy(regl, 1);
                    regl+=1;
                    if(regl>255)
                    {
                        regl=regl-256;
                    }
                    if(regl>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(regl==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(regl);
                    pc++;
                    break;
		case 52:
                    regm=this.getM();
                    this.chkAuxcy(regm, 1);
                    regm+=1;
                    if(regm>255)
                    {
                        regm=regm-256;
                    }
                    if(regm>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(regm==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(regm);
                    this.setM(regm);
                    pc++;
                    break;
	//----------------DCR---------------//all flags except cy
		case 61:
                    this.chkAuxcy(rega, this.complement2(1));
                    rega-=1;
                    if(rega<0)
                    {
                        rega=rega+256;
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
		case 5:
                    this.chkAuxcy(regb, this.complement2(1));
                    regb-=1;
                    if(regb<0)
                    {
                        regb=regb+256;
                    }
                    if(regb>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(regb==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(regb);
                    pc++;
                    break;
		case 13:
                    this.chkAuxcy(regc, this.complement2(1));
                    regc-=1;
                    if(regc<0)
                    {
                        regc=regc+256;
                    }
                    if(regc>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(regc==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(regc);
                    pc++;
                    break;
		case 21:
                    this.chkAuxcy(regd, this.complement2(1));
                    regd-=1;
                    if(regd<0)
		    {
                        regd=regd+256;
                    }
                    if(regd>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(regd==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(regd);
                    pc++;
                    break;
		case 29:
                    this.chkAuxcy(rege, this.complement2(1));
                    rege-=1;
                    if(rege<0)
                    {
                        rege=rege+256;
                    }
                    if(rege>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rege==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rege);
                    pc++;
                    break;
		case 37:
                    this.chkAuxcy(regh, this.complement2(1));
                    regh-=1;
                    if(regh<0)
                    {
                        regh=regh+256;
                    }
                    if(regh>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(regh==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(regh);
                    pc++;
                    break;
		case 45:
                    this.chkAuxcy(regl, this.complement2(1));
                    regl-=1;
                    if(regl<0)
                    {
                        regl=regl+256;
                    }
                    if(regl>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(regl==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(regl);
                    pc++;
                    break;
		case 53:
                    regm=this.getM();
                    this.chkAuxcy(regm, this.complement2(1));
                    rega-=1;
                    if(regm<0)
                    {
                        regm=regm+256;
                    }
                    if(regm>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(regm==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(regm);
                    this.setM(regm);
                    pc++;
                    break;
        //-----------ANA--------------//all flags
                case 167:
                    rega=rega&rega;
                    this.setAuxcy();
                    this.resetCarry();
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
                case 160:
                    rega=rega&regb;
                    this.setAuxcy();
                    this.resetCarry();
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
                case 161:
                    rega=rega&regc;
                    this.setAuxcy();
                    this.resetCarry();
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
                case 162:
                    rega=rega&regd;
                    this.setAuxcy();
                    this.resetCarry();
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
                case 163:
                    rega=rega&rege;
                    this.setAuxcy();
                    this.resetCarry();
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
                case 164:
                    rega=rega&regh;
                    this.setAuxcy();
                    this.resetCarry();
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
                case 165:
                    rega=rega&regl;
                    this.setAuxcy();
                    this.resetCarry();
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
                case 166:
                    regm=this.getM();
                    rega=rega&regm;
                    this.setAuxcy();
                    this.resetCarry();
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
        //-----------ORA--------------//all flags
                case 183:
                    rega=rega|rega;
                    this.resetAuxcy();
                    this.resetCarry();
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
                case 176:
                    rega=rega|regb;
                    this.resetAuxcy();
                    this.resetCarry();
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
                case 177:
                    rega=rega|regc;
                    this.resetAuxcy();
                    this.resetCarry();
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
                case 178:
                    rega=rega|regd;
                    this.resetAuxcy();
                    this.resetCarry();
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
                case 179:
                    rega=rega|rege;
                    this.resetAuxcy();
                    this.resetCarry();
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
                case 180:
                    rega=rega|regh;
                    this.resetAuxcy();
                    this.resetCarry();
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
                case 181:
                    rega=rega|regl;
                    this.resetAuxcy();
                    this.resetCarry();
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
                case 182:
                    regm=this.getM();
                    rega=rega|regm;
                    this.resetAuxcy();
                    this.resetCarry();
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
        //------------XRA-------------//all flags
                case 175:
                    rega=rega^rega;
                    this.resetAuxcy();
                    this.resetCarry();
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
                case 168:
                    rega=rega^regb;
                    this.resetAuxcy();
                    this.resetCarry();
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
                case 169:
                    rega=rega^regc;
                    this.resetAuxcy();
                    this.resetCarry();
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
                case 170:
                    rega=rega^regd;
                    this.resetAuxcy();
                    this.resetCarry();
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
                case 171:
                    rega=rega^rege;
                    this.resetAuxcy();
                    this.resetCarry();
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
                case 172:
                    rega=rega^regh;
                    this.resetAuxcy();
                    this.resetCarry();
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
                case 173:
                    rega=rega^regl;
                    this.resetAuxcy();
                    this.resetCarry();
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
                case 174:
                    regm=this.getM();
                    rega=rega^regm;
                    this.resetAuxcy();
                    this.resetCarry();
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
	//-----------LXI--------------//no flags
		case 1:
                    pc++;
                    regc=Integer.parseInt(data[pc],16);
                    pc++;
                    regb=Integer.parseInt(data[pc],16);
                    pc++;
                    break;
		case 17:
                    pc++;
                    rege=Integer.parseInt(data[pc],16);
                    pc++;
                    regd=Integer.parseInt(data[pc],16);
                    pc++;
                    break;
		case 33:
                    pc++;
                    regl=Integer.parseInt(data[pc],16);
                    pc++;
                    regh=Integer.parseInt(data[pc],16);
                    pc++;
                    break;
		case 49:
                    sp=Integer.parseInt(data[pc+2]+data[pc+1],16);
                    pc+=3;
                    break;
	//------------INX-------------//no flags
		case 3:
                    regc+=1;
                    if(regc>255)
                    {
                        regc=regc-256;
                        regb+=1;
                        if(regb>255)
                        {
                            regb=regb-256;
                        }
                    }
                    pc++;
                    break;
		case 19:
                    rege+=1;
                    if(rege>255)
                    {
                        rege=rege-256;
                        regd+=1;
                        if(regd>255)
                        {
                            regd=regd-256;
                        }
                    }
                    pc++;
                    break;
		case 35:
                    regl+=1;
                    if(regl>255)
                    {
                        regl=regl-256;
                        regh+=1;
                        if(regh>255)
                        {
                            regh=regh-256;
                        }
                    }
                    pc++;
                    break;
		case 51:
                    sp++;
                    if(sp>65535)
                        sp=0;
                    pc++;
                    break;
	//-----------DCX-------------//no flags
		case 11:
                    regc-=1;
                    if(regc<0)
                    {
                        regc=regc+256;
                        regb-=1;
                        if(regb<0)
                        {
                            regb=regb+256;
                        }
                    }
                    pc++;
                    break;
		case 27:
                    rege-=1;
                    if(rege<0)
                    {
                        rege=rege+256;
                        regd-=1;
                        if(regd<0)
                        {
                            regd=regd+256;
                        }
                    }
                    pc++;
                    break;
		case 43:
                    regl-=1;
                    if(regl<0)
                    {
                        regl=regl+256;
                        regh-=1;
                        if(regh<0)
                        {
                            regh=regh+256;
                        }
                    }
                    pc++;
                    break;
		case 59:
                    sp--;
                    if(sp<0)
                        sp=65535;
                    pc++;
                    break;
	//-----------DAD-------------//carry only
                case 9:
                    temp=0;
                    regl=regl+regc;
                    if(regl>255)
                    {
                        regl=regl-256;
                        temp=1;
                    }
                    regh=regh+regb+temp;
                    if(regh>255)
                    {
                        regh=regh-256;
                        this.setCarry();
                    }
                    pc++;
                    break;
                case 25:
                    temp=0;
                    regl=regl+rege;
                    if(regl>255)
                    {
                        regl=regl-256;
                        temp=1;
                    }
                    regh=regh+regd+temp;
                    if(regh>255)
                    {
                        regh=regh-256;
                        this.setCarry();
                    }
                    pc++;
                    break;
                case 41:
                    temp=0;
                    regl=regl+regl;
                    if(regl>255)
                    {
                        regl=regl-256;
                        temp=1;
                    }
                    regh=regh+regh+temp;
                    if(regh>255)
                    {
                        regh=regh-256;
                        this.setCarry();
                    }
                    pc++;
                    break;
                case 57:
                    temp=0;
                    int spli,spui;
                    String sps=Integer.toHexString(sp).toUpperCase();
                    while(sps.length()<4)
                    {
                        sps="0"+sps;
                    }
                    spui=Integer.parseInt((sps.substring(0, 2)),16);
                    spli=Integer.parseInt((sps.substring(2, 4)),16);
                    regl=regl+spli;
                    if(regl>255)
                    {
                        regl=regl-256;
                        temp=1;
                    }
                    regh=regh+spui+temp;
                    if(regh>255)
                    {
                        regh=regh-256;
                        this.setCarry();
                    }
                    pc++;
                    break;
        //-----------LDAX------------//no flags
                case 10:
                    rega=this.getMx(regb, regc);
                    pc++;
                    break;
                case 26:
                    rega=this.getMx(regd, rege);
                    pc++;
                    break;
        //-----------STAX------------//no flags
                case 2:
                    this.setMx(rega, regb, regc);
                    pc++;
                    break;
                case 18:
                    this.setMx(rega, regd, rege);
                    pc++;
                    break;
        //-----------PUSH------------//no flags
                case 197:
                    this.push(regb);
                    this.push(regc);
                    pc++;
                    break;
                case 213:
                    this.push(regd);
                    this.push(rege);
                    pc++;
                    break;
                case 229:
                    this.push(regh);
                    this.push(regl);
                    pc++;
                    break;
                case 245:
                    this.push(rega);
                    this.push(psw);
                    pc++;
                    break;
        //-----------POP-------------//no flags
                case 193:
                    regc=this.pop();
                    regb=this.pop();
                    pc++;
                    break;
                case 209:
                    rege=this.pop();
                    regd=this.pop();
                    pc++;
                    break;
                case 225:
                    regl=this.pop();
                    regh=this.pop();
                    pc++;
                    break;
                case 241:
                    temp=this.pop();
                    this.setPSW(temp);
                    psw=temp;
                    rega=this.pop();
                    pc++;
                    break;
        //-----------Jcond-----------//no flags
                case 194:
                    if(z==0)
                        jmp();
                    else
                        pc+=3;
                    break;
                case 202:
                    if(z==1)
                        jmp();
                    else
                        pc+=3;
                    break;
                case 210:
                    if(cy==0)
                        jmp();
                    else
                        pc+=3;
                    break;
                case 218:
                    if(cy==1)
                        jmp();
                    else
                        pc+=3;
                    break;
                case 226:
                    if(p==0)
                        jmp();
                    else
                        pc+=3;
                    break;
                case 234:
                    if(p==1)
                        jmp();
                    else
                        pc+=3;
                    break;
                case 242:
                    if(s==0)
                        jmp();
                    else
                        pc+=3;
                    break;
                case 250:
                    if(s==1)
                        jmp();
                    else
                        pc+=3;
                    break;
        //-----------Ccond-----------//no flags
                case 196:
                    if(z==0)
                        call();
                    else
                        pc+=3;
                    break;
                case 204:
                    if(z==1)
                        call();
                    else
                        pc+=3;
                    break;
                case 212:
                    if(cy==0)
                        call();
                    else
                        pc+=3;
                    break;
                case 220:
                    if(cy==1)
                        call();
                    else
                        pc+=3;
                    break;
                case 228:
                    if(p==0)
                        call();
                    else
                        pc+=3;
                    break;
                case 236:
                    if(p==1)
                        call();
                    else
                        pc+=3;
                    break;
                case 244:
                    if(s==0)
                        call();
                    else
                        pc+=3;
                    break;
                case 252:
                    if(s==1)
                        call();
                    else
                        pc+=3;
                    break;
        //-----------Rcond-----------//no flags
                case 192:
                    if(z==0)
                        this.ret();
                    else
                        pc++;
                    break;
                case 200:
                    if(z==1)
                        this.ret();
                    else
                        pc++;
                    break;
                case 208:
                    if(cy==0)
                        this.ret();
                    else
                        pc++;
                    break;
                case 216:
                    if(cy==1)
                        this.ret();
                    else
                        pc++;
                    break;
                case 224:
                    if(p==0)
                        this.ret();
                    else
                        pc++;
                    break;
                case 232:
                    if(p==1)
                        this.ret();
                    else
                        pc++;
                    break;
                case 240:
                    if(s==0)
                        this.ret();
                    else
                        pc++;
                    break;
                case 248:
                    if(s==1)
                        this.ret();
                    else
                        pc++;
                    break;
        //-----------ADI-------------//all flags
		case 198:
                    pc++;
                    this.chkAuxcy(rega, Integer.parseInt(data[pc],16));
                    rega+=Integer.parseInt(data[pc],16);
                    if(rega>255)
                    {
                        this.setCarry();
                        rega=rega-256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
	//------------ACI----------------//all flags
		case 206:
                    pc++;
                    this.chkAuxcy(rega, (Integer.parseInt(data[pc],16)+cy));
                    rega+=(Integer.parseInt(data[pc],16)+cy);
                    if(rega>255)
                    {
                        this.setCarry();
                        rega=rega-256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
        //-------------ANI----------------//
                case 230:
                    temp=Integer.parseInt(data[pc+1],16);
                    rega=rega&temp;
                    this.setAuxcy();
                    this.resetCarry();
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc+=2;
                    break;
        //-------------CALL-------------//no flags
                case 205:
                    call();
                    break;
        //-------------CMA--------------//no flags
                case 47:
                    rega=this.complement1(rega);
                    pc++;
                    break;
        //-------------CMC--------------//carry only
                case 63:
                    if(cy==0)
                        this.setCarry();
                    else if(cy==1)
                        this.resetCarry();
                    pc++;
                    break;
        //-------------CPI--------------//all flags
                case 254:
                    int imm=Integer.parseInt(data[pc+1],16);
                    temp=rega-imm;
                    this.chkAuxcy(rega, this.complement2(imm));
                    if(rega<imm)
                    {
                        temp+=256;
                        this.setCarry();
                        this.resetZero();
                    }
                    else if(rega==imm)
                    {
                        this.setZero();
                        this.resetCarry();
                    }
                    else if(rega>imm)
                    {
                        this.resetCarry();
                        this.resetZero();
                    }
                    if(temp>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    this.chkparity(temp);
                    pc+=2;
                    break;
        //-------------DAA--------------//all flags
                case 39:
                    int regah=rega/16;
                    int regal=rega%16;
                    if(regal>9 || ac==1)
                    {
                        rega+=Integer.parseInt("06", 16);
                        this.setAuxcy();
                    }
                    if(regah>9 || cy==1)
                    {
                        rega+=Integer.parseInt("60",16);
                        this.setCarry();
                    }
                    if(rega>255)
                    {
                        rega-=256;
                        this.setCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc++;
                    break;
        //-------------JMP--------------//no flags
                case 195:
                    jmp();
                    break;
	//-------------LDA--------------//no flags
		case 58:
                    temp=Integer.parseInt(data[pc+2]+data[pc+1],16);
                    rega=Integer.parseInt(data[temp],16);
                    pc+=3;
                    break;
        //-------------LHLD-------------//no flags
                case 42:
                    temp=Integer.parseInt(data[pc+2]+data[pc+1],16);
                    regl=Integer.parseInt(data[temp]);
                    temp++;
                    regh=Integer.parseInt(data[temp]);
                    pc+=3;
                    break;
        //-------------NOP--------------//no flags
                case 0:
                    pc++;
                    break;
        //-------------ORI--------------//all flags
                case 246:
                    temp=Integer.parseInt(data[pc+1],16);
                    rega=rega|temp;
                    this.resetAuxcy();
                    this.resetCarry();
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc+=2;
                    break;
        //-------------PCHL-------------//no flags
                case 233:
                    pcl=Integer.toHexString(regl);
                    pcu=Integer.toHexString(regh);
                    while(pcl.length()<2)
                        pcl="0"+pcl;
                    while(pcu.length()<2)
                        pcu="0"+pcu;
                    pc=Integer.parseInt(pcu+pcl,16);
                    break;
        //-------------RAL--------------//carry only
                case 23:
                    a=Integer.toBinaryString(rega);
                    while(a.length()<8)
                    {
                        a="0"+a;
                    }
                    aa=a.toCharArray();
                    tempc=aa[0];
                    for(i=0;i<7;i++)
                    {
                        aa[i]=aa[i+1];
                    }
                    if(cy==1)
                    {
                        aa[7]='1';
                    }
                    else
                    {
                        aa[7]='0';
                    }
                    nn="";
                    for(i=0;i<aa.length;i++)
                        nn+=aa[i];
                    rega=Integer.parseInt(nn, 2);
                    if(tempc=='1')
                    {
                        this.setCarry();
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    pc++;
                    break;
        //-------------RAR--------------//carry only
                case 31:
                    a=Integer.toBinaryString(rega);
                    while(a.length()<8)
                    {
                        a="0"+a;
                    }
                    aa=a.toCharArray();
                    tempc=aa[7];
                    for(i=7;i>0;i--)
                    {
                        aa[i]=aa[i-1];
                    }
                    if(cy==1)
                    {
                        aa[0]='1';
                    }
                    else
                    {
                        aa[0]='0';
                    }
                    nn="";
                    for(i=0;i<aa.length;i++)
                        nn+=aa[i];
                    rega=Integer.parseInt(nn, 2);
                    if(tempc=='1')
                    {
                        this.setCarry();
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    pc++;
                    break;
        //-------------RET--------------//no flags
                case 201:
                    this.ret();
                    break;
        //-------------RLC--------------//carry only
                case 7:
                    a=Integer.toBinaryString(rega);
                    while(a.length()<8)
                    {
                        a="0"+a;
                    }
                    aa=a.toCharArray();
                    tempc=aa[0];
                    for(i=0;i<7;i++)
                    {
                        aa[i]=aa[i+1];
                    }
                    aa[7]=tempc;
                    nn="";
                    for(i=0;i<aa.length;i++)
                        nn+=aa[i];
                    rega=Integer.parseInt(nn, 2);
                    if(tempc=='1')
                    {
                        this.setCarry();
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    pc++;
                    break;
        //-------------RRC--------------//carry only
                case 15:
                    a=Integer.toBinaryString(rega);
                    while(a.length()<8)
                    {
                        a="0"+a;
                    }
                    aa=a.toCharArray();
                    tempc=aa[7];
                    for(i=7;i>0;i--)
                    {
                        aa[i]=aa[i-1];
                    }
                    aa[0]=tempc;
                    nn="";
                    for(i=0;i<aa.length;i++)
                        nn+=aa[i];
                    rega=Integer.parseInt(nn, 2);
                    if(tempc=='1')
                    {
                        this.setCarry();
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    pc++;
                    break;
        //-------------SBI--------------//all flags
                case 222:
                    temp=Integer.parseInt(data[pc+1],16);
                    this.chkAuxcy(rega, this.complement2(temp+cy));
                    rega-=(temp+cy);
                    if(rega<0)
                    {
                        this.setCarry();
                        rega=rega+256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc+=2;
                    break;
        //-------------SHLD-------------//no flags
                case 34:
                    temp=Integer.parseInt(data[pc+2]+data[pc+1],16);
                    this.setMemory(temp, regl);
                    temp++;
                    this.setMemory(temp,regh);
                    pc+=3;
                    break;
        //-------------SPHL-------------//no flags
                case 249:
                    spl=Integer.toHexString(regl);
                    spu=Integer.toHexString(regh);
                    while(spl.length()<2)
                        spl="0"+spl;
                    while(spu.length()<2)
                        spu="0"+spu;
                    sp=Integer.parseInt(spu+spl,16);
                    pc++;
                    break;
        //-------------STA--------------//no flags
                case 50:
                    temp=Integer.parseInt(data[pc+2]+data[pc+1],16);
                    this.setMemory(temp, rega);
                    pc+=3;
                    break;
        //-------------STC--------------//carry only
                case 55:
                    this.setCarry();
                    pc++;
                    break;
        //-------------SUI--------------//all flags
                case 214:
                    temp=Integer.parseInt(data[pc+1],16);
                    this.chkAuxcy(rega, this.complement2(temp));
                    rega-=temp;
                    if(rega<0)
                    {
                        this.setCarry();
                        rega=rega+256;
                    }
                    else
                    {
                        this.resetCarry();
                    }
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc+=2;
                    break;
        //-------------XCHG--------------//no flags
                case 235:
                    temp=regd;
                    regd=regh;
                    regh=temp;
                    temp=rege;
                    rege=regl;
                    regl=temp;
                    pc++;
                    break;
        //-------------XRI--------------//all flags
                case 238:
                    temp=Integer.parseInt(data[pc+1],16);
                    rega=rega^temp;
                    this.resetAuxcy();
                    this.resetCarry();
                    if(rega>127)
                    {
                        this.setSign();
                    }
                    else
                    {
                        this.resetSign();
                    }
                    if(rega==0)
                    {
                        this.setZero();
                    }
                    else
                    {
                        this.resetZero();
                    }
                    this.chkparity(rega);
                    pc+=2;
                    break;
        //-------------XTHL--------------//no flags
                case 227:
                    int pl=this.pop();
                    int ph=this.pop();
                    this.push(regh);
                    this.push(regl);
                    regh=ph;
                    regl=pl;
                    pc++;
                    break;
        //-------------EXTERNAL HARDWARE REQUIRING OPCODES------------//
        //-------------DI----------------//no flags
                case 243:
                    JOptionPane.showMessageDialog(null, "No hardware interrupt found for DI instruction.\nNo interrupt disabled.", "Hardware Not Found", JOptionPane.WARNING_MESSAGE);
                    pc++;
                    break;
        //-------------EI----------------//no flags
                case 251:
                    JOptionPane.showMessageDialog(null, "No hardware interrupt found for EI instruction.\nNo interrupt enabled.", "Hardware Not Found", JOptionPane.WARNING_MESSAGE);
                    pc++;
                    break;
        //-------------IN----------------//no flags
                case 219:
                    rega=0;
                    JOptionPane.showMessageDialog(null, "No hardware input port : "+data[pc+1].toUpperCase()+" found for IN instruction.\nAccumulator set to 0x00.", "Hardware Not Found", JOptionPane.WARNING_MESSAGE);
                    pc+=2;
                    break;
        //-------------OUT---------------//no flags
                case 211:
                    JOptionPane.showMessageDialog(null, "No hardware output port : "+data[pc+1].toUpperCase()+" found for OUT instruction.", "Hardware Not Found", JOptionPane.WARNING_MESSAGE);
                    pc+=2;
                    break;
        //-------------RIM---------------//no flags
                case 32:
                    rega=0;
                    JOptionPane.showMessageDialog(null, "No hardware interrupt found for RIM instruction.\nAccumulator set to 0x00.", "Hardware Not Found", JOptionPane.WARNING_MESSAGE);
                    pc++;
                    break;
        //-------------SIM---------------//no flags
                case 48:
                    JOptionPane.showMessageDialog(null, "No hardware interrupt found for SIM instruction.\nResults might vary.", "Hardware Not Found", JOptionPane.WARNING_MESSAGE);
                    pc++;
                    break;
	//---------------HLT && RST 0-7-----------------//no flags
		case 118:
		case 199:
		case 207:
		case 215:
		case 223:
		case 231:
		case 239:
		case 247:
		case 255:
                    endflag=1;
                    pc++;
                    break;
		default:
                    errorflag=1;
                    String er=Integer.toHexString(pc);
                    while(er.length()<4)
                        er="0"+er;
                    JOptionPane.showMessageDialog(null, "Opcode Error At Memory Address : "+er.toUpperCase(), "Operational Error", JOptionPane.ERROR_MESSAGE);
                    break;
            }
            this.disp();
        }
        if(endflag==1)
        {
            JOptionPane.showMessageDialog(null, "Execution Completed Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
        }
        if(pc>65535 && endflag!=1)
        {
            JOptionPane.showMessageDialog(null, "Memory Overflow...\nNo end opcode found...", "Operational Error", JOptionPane.ERROR_MESSAGE);
        }
        this.disp();
    }

}